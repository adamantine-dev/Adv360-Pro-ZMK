/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <3000>;
            quick_tap_ms = <2000>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td_chrome_prev_tab: td_chrome_prev_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CHROME_PREV_TAB";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LG(LA(LEFT))>;
        };

        td_chrome_next_tab: td_chrome_next_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CHROME_NEXT_TAB";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp LA(LG(RIGHT))>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL   &kp N1       &kp N2      &kp N3      &kp N4        &kp N5       &tog 1                                                                                &mo 3      &kp N6  &kp N7          &kp N8           &kp N9          &kp N0           &kp MINUS
&kp ESCAPE  &kp Q        &kp W       &kp E       &kp R         &kp T        &none                                                                                 &none      &kp Y   &kp U           &kp I            &kp O           &kp P            &kp BSLH
&kp TAB     &hm LCTRL A  &hm LALT S  &hm LGUI D  &hm LSHIFT F  &hm ENTER G  &none          &kp LGUI               &kp LG(LC(LALT))      &kp RG(RCTRL)  &kp RGUI   &none      &kp H   &hm RSHIFT J    &hm RIGHT_GUI K  &hm RALT L      &hm RCTRL SEMI   &kp SQT
&kp LSHFT   &kp Z        &kp X       &kp C       &kp V         &kp B                                              &kp LCTRL             &kp RCTRL                            &kp N   &kp M           &kp COMMA        &kp DOT         &kp FSLH         &kp RSHFT
&mo 2       &kp GRAVE    &kp CAPS    &kp LBKT    &kp RBKT                   &kp BACKSPACE  &kp LG(LC(LA(LSHFT)))  &kp LALT              &kp RALT       &kp ENTER  &kp SPACE          &kp LEFT_ARROW  &kp UP_ARROW     &kp DOWN_ARROW  &kp RIGHT_ARROW  &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3            &kp N4     &kp N5  &trans                                                                                 &mo 3            &kp N6  &kp KP_NUM      &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp ESC    &kp Q      &kp W     &kp UP_ARROW      &kp R      &kp T   &none                                                                                  &none            &kp Y   &kp KP_N7       &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp TAB    &kp A      &kp LEFT  &kp DOWN          &kp RIGHT  &kp G   &none          &kp LGUI                &kp LG(LC(LALT))      &kp RG(RCTRL)  &kp RGUI   &none            &kp H   &kp KP_N4       &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C             &kp V      &kp B                                          &kp LCTRL             &kp RCTRL                                  &kp N   &kp KP_N1       &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT_BRACKET  &kp RBKT           &kp BACKSPACE  &kp LG(LC(LA(LSHIFT)))  &kp LALT              &kp RALT       &kp ENTER  &kp KP_NUMBER_0          &kp LEFT_ARROW  &kp UP_ARROW  &kp KP_DOT     &kp RIGHT_ARROW  &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &kp F6   &tog 1                                      &mo 3   &kp F7   &kp F8   &kp F9   &kp F10  &kp F11  &kp F12
&kp F13  &kp F14  &kp F15  &kp F16  &kp F17  &kp F18  &trans                                      &trans  &kp F19  &kp F20  &kp F21  &kp F22  &kp F23  &kp F24
&trans   &trans   &kp F13  &kp F14  &kp F15  &trans   &none   &trans  &trans      &trans  &trans  &none   &trans   &kp F19  &kp F20  &kp F21  &trans   &trans
&trans   &trans   &kp F16  &kp F17  &kp F18  &trans                   &trans      &trans                  &trans   &kp F22  &kp F23  &kp F24  &trans   &trans
&trans   &trans   &trans   &trans   &trans            &trans  &trans  &trans      &trans  &trans  &trans           &trans   &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none                 &none                    &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none                 &none                    &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none                 &none                    &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &mt LA(LG(LEFT)) DOT  &mt LA(LG(RIGHT)) SLASH  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &td_chrome_prev_tab   &td_chrome_next_tab      &none
            >;
        };
    };
};
